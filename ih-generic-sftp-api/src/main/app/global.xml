<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:tls="http://www.mulesoft.org/schema/mule/tls" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns:secure-property-placeholder="http://www.mulesoft.org/schema/mule/secure-property-placeholder" xmlns:cluster="http://www.mulesoft.org/schema/mule/ee/cluster" xmlns:api-platform-gw="http://www.mulesoft.org/schema/mule/api-platform-gw" xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:sftp="http://www.mulesoft.org/schema/mule/sftp" xmlns:context="http://www.springframework.org/schema/context" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mule-ss="http://www.mulesoft.org/schema/mule/spring-security"
	xmlns:ss="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/sftp http://www.mulesoft.org/schema/mule/sftp/current/mule-sftp.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd
http://www.mulesoft.org/schema/mule/api-platform-gw http://www.mulesoft.org/schema/mule/api-platform-gw/current/mule-api-platform-gw.xsd
http://www.mulesoft.org/schema/mule/spring-security http://www.mulesoft.org/schema/mule/spring-security/3.1/mule-spring-security.xsd
http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd
http://www.mulesoft.org/schema/mule/secure-property-placeholder http://www.mulesoft.org/schema/mule/secure-property-placeholder/current/mule-secure-property-placeholder.xsd
http://www.mulesoft.org/schema/mule/tls http://www.mulesoft.org/schema/mule/tls/current/mule-tls.xsd">

    
    <http:listener-config name="ih-generic-sftp-api-httpListenerConfig" host="0.0.0.0" port="${https.port}" doc:name="HTTP Listener Configuration" protocol="HTTPS">
        <tls:context>
            <tls:key-store type="jks" path="${cert.path}" keyPassword="${cert.key.password}" password="${cert.password}"/>
        </tls:context>
    </http:listener-config>
    <sftp:connector name="generic_sftp" validateConnections="true" doc:name="SFTP"/>
    <secure-property-placeholder:config name="Secure_Property_Placeholder" encryptionAlgorithm="Blowfish" key="${secret.key}" location="mule-${env}-properties.properties" doc:name="Secure Property Placeholder"/>
    <http:request-config name="ih-inetegration-system-api-config" host="${int.api.host}"  doc:name="HTTP Request Configuration" port="${int.api.port}" basePath="${int.api.base.path}" protocol="HTTPS">
        <tls:context>
            <tls:trust-store insecure="true"/>
        </tls:context>
    </http:request-config>
    <api-platform-gw:api apiName="${api.name}" version="${api.version}" flowRef="ih-generic-sftp-api-main" create="false" apikitRef="ih-generic-sftp-api-config" doc:name="API Autodiscovery"/>
    <choice-exception-strategy name="global_exception_strategy">
        <catch-exception-strategy when="#[exception.causedBy(org.springframework.security.authentication.BadCredentialsException)]" doc:name="BadCredentialsException">
            <set-variable variableName="exception" value="#[exception.cause.message]" doc:name="Variable"/>
            <dw:transform-message doc:name="set bad credential">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"code": "401",
	"message": "Unauthorized user",
	"description": flowVars.exception
}]]></dw:set-payload>
                <dw:set-variable variableName="http.status"><![CDATA[%dw 1.0
%output application/java
---
"401"]]></dw:set-variable>
            </dw:transform-message>
        </catch-exception-strategy>
        <catch-exception-strategy when="#[exception.causedBy(org.mule.api.security.NotPermittedException)]" doc:name="UnauthorisedException">
            <set-variable variableName="exception" value="#[exception.getCauseException().getMessage()]" doc:name="Variable"/>
            <dw:transform-message doc:name="set unauthorized">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"code": "403",
	"message": "User forbidden",
	"description": flowVars.exception
}]]></dw:set-payload>
                <dw:set-variable variableName="http.status"><![CDATA[%dw 1.0
%output application/java
---
"403"]]></dw:set-variable>
            </dw:transform-message>
        </catch-exception-strategy>
        <catch-exception-strategy when="#[exception.causedBy(com.jcraft.jsch.JSchException)||exception.causedBy(java.io.IOException)]" doc:name="SFTP Exception">
            <set-variable variableName="exception" value="#[exception.cause.message]" doc:name="exception"/>
            <async doc:name="Async">
                <dw:transform-message doc:name="set payload for error api">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
  "errorCode": "500",
  "errorMessage": "Error while performing SFTP operation",
  "errorDescription": flowVars.exception,
  "errorSource": "sftp",
  ("errorObject": ((flowVars.requestDetails.relativePath as :string splitBy "/api/" )[-1] splitBy "/" )[0]) when (flowVars.requestDetails.relativePath !=null and flowVars.requestDetails.relativePath !={} and flowVars.requestDetails.relativePath !=[]),
  ("errorId": flowVars.requestDetails.uriParams) when (flowVars.requestDetails.uriParams !=null and flowVars.requestDetails.uriParams !={} and flowVars.requestDetails.uriParams !=[]),
  ("errorPayload": flowVars.requestDetails.data ) when (flowVars.requestDetails.data !=[] and flowVars.requestDetails.data !=null and flowVars.requestDetails.data !={}),
  "flowReference": "ih-generic-ftp-write_sub_flow",
  "environment": p('env')
}]]></dw:set-payload>
                </dw:transform-message>
                <flow-ref name="error_api_call" doc:name="error_api_call"/>
            </async>
            <set-property propertyName="http.status" value="#[&quot;500&quot;]" doc:name="set http status"/>
            <dw:transform-message doc:name="set conenction error">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"code": "500",
	"message": "Error while performing SFTP operation",
	"description": "Connectivity issue. Kindly check the connection parameters" when (flowVars.exception contains "java.net.UnknownHostException") otherwise 
	("Authentication issue. Kindly verify the credentials" when (flowVars.exception contains "Auth fail") otherwise flowVars.exception)
}]]></dw:set-payload>
            </dw:transform-message>
        </catch-exception-strategy>
        <catch-exception-strategy when="#[exception.causeMatches('*org.mule.module.apikit.exception.*') == false]" doc:name="Unhandeled">
            <set-variable variableName="exception" value="#[exception.cause.message]" doc:name="exception"/>
            <async doc:name="Async">
                <dw:transform-message doc:name="set payload for error api">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
  "errorCode": "500",
  "errorMessage": "Unhandled",
  "errorDescription": flowVars.exception,
  "errorSource": "unknown",
  ("errorObject": ((flowVars.requestDetails.relativePath as :string splitBy "/api/" )[-1] splitBy "/" )[0]) when (flowVars.requestDetails.relativePath !=null and flowVars.requestDetails.relativePath !={} and flowVars.requestDetails.relativePath !=[]),
  ("errorId": flowVars.requestDetails.uriParams) when (flowVars.requestDetails.uriParams !=null and flowVars.requestDetails.uriParams !={} and flowVars.requestDetails.uriParams !=[]),
  ("errorPayload": flowVars.requestDetails.data ) when (flowVars.requestDetails.data !=[] and flowVars.requestDetails.data !=null and flowVars.requestDetails.data !={}),
  "flowReference": "ih-generic-ftp-write_sub_flow",
  "environment": p('env')
}]]></dw:set-payload>
                </dw:transform-message>
                <flow-ref name="error_api_call" doc:name="error_api_call"/>
            </async>
            <set-property propertyName="http.status" value="#[&quot;500&quot;]" doc:name="set http status"/>
            <dw:transform-message doc:name="set error payload">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"code": "500",
	"message": "Unhandled exception",
	"description": flowVars.exception
}]]></dw:set-payload>
            </dw:transform-message>
        </catch-exception-strategy>
        <exception-strategy ref="ih-generic-sftp-api-apiKitGlobalExceptionMapping" doc:name="Reference Exception Strategy"/>
    </choice-exception-strategy>
    <sub-flow name="error_api_call">
        <http:request config-ref="ih-inetegration-system-api-config" path="${int.api.error.path}" method="POST" doc:name="error_api"/>
        <logger message="#[message.payloadAs(java.lang.String)]" level="INFO" doc:name="api resposne"/>
    </sub-flow>
</mule>
